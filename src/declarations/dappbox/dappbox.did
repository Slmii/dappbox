type UserId__1 = principal;
type UserId = principal;
type User = 
 record {
   createdAt: Time;
   userId: UserId;
 };
type Time = int;
type Result_1 = 
 variant {
   err: Error;
   ok: vec Asset;
 };
type Result = 
 variant {
   err: Error;
   ok: User;
 };
type Error = 
 variant {
   AlreadyExists;
   NotAuthorized;
   NotFound;
 };
type DappBox = 
 service {
   createUser: () -> (Result);
   getAssets: () -> (Result_1) query;
   getUser: () -> (Result) query;
 };
type AssetId = nat32;
type Asset = 
 record {
   assetId: AssetId;
   assetType: text;
   createdAt: Time;
   extension: opt text;
   isFavorite: bool;
   mimeType: opt text;
   name: text;
   parentId: opt AssetId;
   size: opt nat32;
   userId: UserId__1;
 };
service : () -> DappBox
